{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Jie's wiki\n\n\nThis is a personal wiki that is used to keep notes.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-jies-wiki", 
            "text": "This is a personal wiki that is used to keep notes.", 
            "title": "Welcome to Jie's wiki"
        }, 
        {
            "location": "/fun/fun_places_to_go/", 
            "text": "Fun places to go\n\n\nYellowstone NP\n\n\nOnline resources:\n\n\n\n\nsee brief info \nlink\n\n\nsee the park map \nlink\n\n\nsee site photos \nlink\n\n\nsee plans \nlink\n\n\n\n\nSeattle\n\n\nThings to do\n\n\n\n\nseattle center  \u2014 3-5 hours\n\n\nspace needle, skycity restaurant\n\n\npacific center\n\n\nexperience music project\n\n\nride-a-duck\n\n\n\n\n\n\npike place market  \u2014 2 hours total \n\n\nfirst Starbucks\n\n\nclam chowder\n\n\nflying fish\n\n\ngum wall\n\n\n\n\n\n\nferries wheel  \u2014 30~60min\n\n\nnight view of Seattle at Karry park  \u2014 30 min\n\n\ncrab pot \u2014 lunch/dinner\n\n\nflight museum  \u2014 2 hr\n\n\nBoeing factory  \u2014 4 hr\n\n\nUW campus, quad, Suzzello library \u2014 2 hr\n\n\ngas work park  \u2014 1hr\n\n\nlake view cemetery, \u674e\u5c0f\u9f99\u5893 \u2014 30min\n\n\nMountain Rainier  \u2014 6 hr\n\n\nAlki beach park  \u2014 good place for dinner\n\n\nOlympic national park \u2014 2days\n\n\nNorth Cascades National Park \n\n\nRattlesnake ledge trail  \u2014 4hr\n\n\nSnoqualmie fall  \u2014 3hr\n\n\nwater front park  \u2014 30 min\n\n\nSeattle Premium outlet shopping \u2014 depends\n\n\nleavenworth  \u2014 1day\n\n\nSmith Tower  \u2014 1hr\n\n\nwater activities\n\n\nkayak\n\n\nflight tour, water plane  \u2014 2~3hr\n\n\n\n\nEat\n\n\n\n\ncrab pot $50\n\n\nstaples and fancy $45\n\n\nthe pink door $30\n\n\n\n\nSan Francisco\n\n\nThings to do\n\n\n\n\ngolden gate bridge\n\n\ngolden gate park\n\n\nLombard street \u4e5d\u66f2\u82b1\u8857\n\n\nfishman's wharf \u6e14\u4eba\u7801\u5934\n\n\ncable car \u94db\u94db\u8f66\n\n\nalcatraz island \u6076\u9b54\u5c9b\n\n\nunion square \n\n\ntwin peaks \u53cc\u5b50\u5cf0\n\n\nSan Jose, 1hour south\n\n\nStanford, 40min south\n\n\n17 mile drive, 1.5+ hour south from downtown, pass by San Jose (silicon valley)\n\n\nHigh way 1, about 3 hour south from downtown,\n\n\n\n\nNear by national parks\n\n\n\n\nredwood national park, 5 hour north\n\n\nYosemite national park, 3hr east\n\n\n\n\nsuggested plan\n\n\n\n\nride the cable car from downtown to Fishman's wharf\n\n\nrent a bike at fishman's wharf and ride to golden gate bridge, bike on the bridge \n\n\nbike back to fishman's wharf.\n\n\nOR, bike all the way to Sausalito Ferry terminal and take the Ferry back to fishman's wharf. It would be very tiring this way\n\n\n\n\nBoston\n\n\nThings to do\n\n\n\n\nDuck tour\n\n\nBoston common\n\n\nFreedom trail\n\n\nquincy market\n\n\n\u74e6\u767b\u6e56\uff0c\u4e00\u5b9a\u8981\u5e26\u4e00\u672c\u68ad\u7f57\u7684\u8457\u4f5c\n\n\nharvard/MIT\n\n\nboston public garden\n\n\nback bay\n\n\nBunk hill\n\n\nwellesley\u5973\u6821\n\n\nwhale watch\n\n\nMuseum of fine art\n\n\nIsabella Stewart gardner Museum\n\n\nBoston Public Library\n\n\n\n\nChicago\n\n\nA 2-day trip plan\n\n\n\n\nDay 1:\n\n\nArt Institute of Chicago\n\n\nCloud Gate\n\n\nMillennium Park\n\n\nSkydeck Chicago\n\n\nMuseum of Science and Industry\n - this is near the University\n\n\n\n\n\n\nDay 2:\n\n\nThe Field Museum\n\n\nUniversity of Chicago\n\n\nMichigan Avenue\n\n\nMagnificent Mile\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\nWrigley Field\n\n\nThe Boring Store\n - It just sells really funny things \n\n\n\n\nFood\n\n\n\n\nThe Parthenon - Greek food, Chicago has a great greek town. I think most of their restaurants are pretty good\n\n\nPurple pig - Tapas, sometimes has long lines\n\n\nchicago style hotdogs if you like hotdogs - probably many places to choose from\n\n\nDeep Dish Pizza - I have only been to Uno's but that is a chain. I heard that Lou Malnatis is good.\n\n\nthe chinatown there is better than Seattle's but not better than Vancouver\n\n\nClarks - this is a 24 hour diner. Its a chicago chain, pretty famous, and a fun experience but the food is just what you would expect from a diner - large portions for low prices!\n\n\nHot Chocolate - nice desserts \n\n\n\n\nOther resources\n\n\n\n\n\u4e2d\u6587\u535a\u7269\u9986\u6e38\u8bb0\n\n\n\u6e38\u8bb0\n\n\n\u6e38\u8bb0\n\n\n\u6e38\u8bb0\n\n\n\n\nVancouver\n\n\nThings to do\n\n\n\n\nStanley park\n\n\nCapliano suspension bridge\n\n\nChina town\n\n\nGastown\n\n\n\u52a0\u62ff\u5927\u5e7f\u573a\n 999 Canada Place, Vancouver, BC V6C 3T4\n\n\nEnglish Bay, Greater Vancouver, BC\n\n\nLions Gate Bridge, Vancouver, BC\n\n\n\u84b8\u6c7d\u949f\n Water Street Vancouver, British Columbia V6B 1B8\n\n\n\u4e2d\u5c71\u516c\u56ed\n Dr. Sun Yat-sen Classical Chinese Garden\n\n\nUBC botanical garden\n\n\nQueen Elizabeth park\n\n\nwhite rocks\n\n\n\n\nOther resources\n\n\n\n\n\u6e38\u8bb0\n\n\n\u6e38\u8bb0", 
            "title": "Fun places to go"
        }, 
        {
            "location": "/fun/fun_places_to_go/#fun-places-to-go", 
            "text": "", 
            "title": "Fun places to go"
        }, 
        {
            "location": "/fun/fun_places_to_go/#yellowstone-np", 
            "text": "Online resources:   see brief info  link  see the park map  link  see site photos  link  see plans  link", 
            "title": "Yellowstone NP"
        }, 
        {
            "location": "/fun/fun_places_to_go/#seattle", 
            "text": "Things to do   seattle center  \u2014 3-5 hours  space needle, skycity restaurant  pacific center  experience music project  ride-a-duck    pike place market  \u2014 2 hours total   first Starbucks  clam chowder  flying fish  gum wall    ferries wheel  \u2014 30~60min  night view of Seattle at Karry park  \u2014 30 min  crab pot \u2014 lunch/dinner  flight museum  \u2014 2 hr  Boeing factory  \u2014 4 hr  UW campus, quad, Suzzello library \u2014 2 hr  gas work park  \u2014 1hr  lake view cemetery, \u674e\u5c0f\u9f99\u5893 \u2014 30min  Mountain Rainier  \u2014 6 hr  Alki beach park  \u2014 good place for dinner  Olympic national park \u2014 2days  North Cascades National Park   Rattlesnake ledge trail  \u2014 4hr  Snoqualmie fall  \u2014 3hr  water front park  \u2014 30 min  Seattle Premium outlet shopping \u2014 depends  leavenworth  \u2014 1day  Smith Tower  \u2014 1hr  water activities  kayak  flight tour, water plane  \u2014 2~3hr   Eat   crab pot $50  staples and fancy $45  the pink door $30", 
            "title": "Seattle"
        }, 
        {
            "location": "/fun/fun_places_to_go/#san-francisco", 
            "text": "Things to do   golden gate bridge  golden gate park  Lombard street \u4e5d\u66f2\u82b1\u8857  fishman's wharf \u6e14\u4eba\u7801\u5934  cable car \u94db\u94db\u8f66  alcatraz island \u6076\u9b54\u5c9b  union square   twin peaks \u53cc\u5b50\u5cf0  San Jose, 1hour south  Stanford, 40min south  17 mile drive, 1.5+ hour south from downtown, pass by San Jose (silicon valley)  High way 1, about 3 hour south from downtown,   Near by national parks   redwood national park, 5 hour north  Yosemite national park, 3hr east   suggested plan   ride the cable car from downtown to Fishman's wharf  rent a bike at fishman's wharf and ride to golden gate bridge, bike on the bridge   bike back to fishman's wharf.  OR, bike all the way to Sausalito Ferry terminal and take the Ferry back to fishman's wharf. It would be very tiring this way", 
            "title": "San Francisco"
        }, 
        {
            "location": "/fun/fun_places_to_go/#boston", 
            "text": "Things to do   Duck tour  Boston common  Freedom trail  quincy market  \u74e6\u767b\u6e56\uff0c\u4e00\u5b9a\u8981\u5e26\u4e00\u672c\u68ad\u7f57\u7684\u8457\u4f5c  harvard/MIT  boston public garden  back bay  Bunk hill  wellesley\u5973\u6821  whale watch  Museum of fine art  Isabella Stewart gardner Museum  Boston Public Library", 
            "title": "Boston"
        }, 
        {
            "location": "/fun/fun_places_to_go/#chicago", 
            "text": "A 2-day trip plan   Day 1:  Art Institute of Chicago  Cloud Gate  Millennium Park  Skydeck Chicago  Museum of Science and Industry  - this is near the University    Day 2:  The Field Museum  University of Chicago  Michigan Avenue  Magnificent Mile     Optional   Wrigley Field  The Boring Store  - It just sells really funny things    Food   The Parthenon - Greek food, Chicago has a great greek town. I think most of their restaurants are pretty good  Purple pig - Tapas, sometimes has long lines  chicago style hotdogs if you like hotdogs - probably many places to choose from  Deep Dish Pizza - I have only been to Uno's but that is a chain. I heard that Lou Malnatis is good.  the chinatown there is better than Seattle's but not better than Vancouver  Clarks - this is a 24 hour diner. Its a chicago chain, pretty famous, and a fun experience but the food is just what you would expect from a diner - large portions for low prices!  Hot Chocolate - nice desserts    Other resources   \u4e2d\u6587\u535a\u7269\u9986\u6e38\u8bb0  \u6e38\u8bb0  \u6e38\u8bb0  \u6e38\u8bb0", 
            "title": "Chicago"
        }, 
        {
            "location": "/fun/fun_places_to_go/#vancouver", 
            "text": "Things to do   Stanley park  Capliano suspension bridge  China town  Gastown  \u52a0\u62ff\u5927\u5e7f\u573a  999 Canada Place, Vancouver, BC V6C 3T4  English Bay, Greater Vancouver, BC  Lions Gate Bridge, Vancouver, BC  \u84b8\u6c7d\u949f  Water Street Vancouver, British Columbia V6B 1B8  \u4e2d\u5c71\u516c\u56ed  Dr. Sun Yat-sen Classical Chinese Garden  UBC botanical garden  Queen Elizabeth park  white rocks   Other resources   \u6e38\u8bb0  \u6e38\u8bb0", 
            "title": "Vancouver"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/", 
            "text": "Install intel Fortan on Ubuntu 12.10\n\n\nPrerequisite\n\n\n\n\n\n\nsee \nthis link\n\n\nmv /bin/sh /bin/sh.orig\nln -s /bin/bash /bin/sh\n\n\n\n\n\n\n\nUbuntu 11.04 through Ubuntu 12.10  :\n\n\n\n\nComposer XE  (aka version compiler versions 12.x and 13.x) prerequisites for Ubuntu Desktop, assuming that gcc and g++ are installed already:\napt-get install build-essential\napt-get install gcc-multilib\napt-get install rpm\napt-get install ia32-libs  #only needed if you install the 32bit compiler\napt-get install openjdk-6-jre-headless\n\n\n\n\n\n\n\nDownload\n\n\n\n\nDownload Fortran compiler intel. An email address is required.  \nDownload link\n\n\n\n\nInstall\n\n\n\n\n\n\nlocate the download tar file\n\n\ntar -xvzf l_fcomposer.tgz\ncd l_fcomposer\nsudo ./install.sh\n\n\n\n\n\n\n\nFollow the installation instructions:\n\n\n\n\nchoose Option 1 to install Intel Fortran, \n\n\nchoose Option 1 to proceed with a serial number.\n\n\ntype in the serial number (case-sensitive) given in the email. (XXXX-XXXXXXXX). Choose 1 for a default install.\n\n\nPress Enter to read the license agreement. The spacebar speeds through this quickly. Type 'accept' to accept the license agreement. \n\n\nAt some point the installation may stop to ask for some 'optional' packages to be installed. Skip this warning.\n\n\n\n\n\n\n\n\nConfig system\n\n\n\n\n\n\nAfter the installation is finished go to the terminal and:\n\n\ncd ~\nnano .bashrc\n\n\n\n\n\n\n\ngo to the end of this file and add the following lines:\n\n\nPATH=\"/opt/intel/Compiler/.../bin/intel64:$PATH\"\nexport PATH\nLD_LIBRARY_PATH=\"/opt/intel/Compiler/.../lib/intel64:$LD_LIBRARY_PATH\"\nexport LD_LIBRARY_PATH\n\n\n\n\n\n\n\nEnter the right path in the lines above. Exit the file by saving the changes. \n\n\n\n\n\n\nlet the system read the updated paths by the command:\n\n\nsource .bashrc\n\n\n\n\n\n\n\nThe installation is finished.\n\n\nTest\n\n\n\n\n\n\nwrite simple file as hello.f containing\n\n\nprogram hello\nprint *,'Hello World!'\nend program\n\n\n\n\n\n\n\nCompile and run your code by the command:\n\n\nifort hello.f\n./a.out", 
            "title": "Fortran on Ubuntu"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#install-intel-fortan-on-ubuntu-1210", 
            "text": "", 
            "title": "Install intel Fortan on Ubuntu 12.10"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#prerequisite", 
            "text": "see  this link  mv /bin/sh /bin/sh.orig\nln -s /bin/bash /bin/sh    Ubuntu 11.04 through Ubuntu 12.10  :   Composer XE  (aka version compiler versions 12.x and 13.x) prerequisites for Ubuntu Desktop, assuming that gcc and g++ are installed already: apt-get install build-essential\napt-get install gcc-multilib\napt-get install rpm\napt-get install ia32-libs  #only needed if you install the 32bit compiler\napt-get install openjdk-6-jre-headless", 
            "title": "Prerequisite"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#download", 
            "text": "Download Fortran compiler intel. An email address is required.   Download link", 
            "title": "Download"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#install", 
            "text": "locate the download tar file  tar -xvzf l_fcomposer.tgz\ncd l_fcomposer\nsudo ./install.sh    Follow the installation instructions:   choose Option 1 to install Intel Fortran,   choose Option 1 to proceed with a serial number.  type in the serial number (case-sensitive) given in the email. (XXXX-XXXXXXXX). Choose 1 for a default install.  Press Enter to read the license agreement. The spacebar speeds through this quickly. Type 'accept' to accept the license agreement.   At some point the installation may stop to ask for some 'optional' packages to be installed. Skip this warning.", 
            "title": "Install"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#config-system", 
            "text": "After the installation is finished go to the terminal and:  cd ~\nnano .bashrc    go to the end of this file and add the following lines:  PATH=\"/opt/intel/Compiler/.../bin/intel64:$PATH\"\nexport PATH\nLD_LIBRARY_PATH=\"/opt/intel/Compiler/.../lib/intel64:$LD_LIBRARY_PATH\"\nexport LD_LIBRARY_PATH    Enter the right path in the lines above. Exit the file by saving the changes.     let the system read the updated paths by the command:  source .bashrc    The installation is finished.", 
            "title": "Config system"
        }, 
        {
            "location": "/tackles/Fortran_on_Ubuntu/#test", 
            "text": "write simple file as hello.f containing  program hello\nprint *,'Hello World!'\nend program    Compile and run your code by the command:  ifort hello.f\n./a.out", 
            "title": "Test"
        }, 
        {
            "location": "/tackles/github_host/", 
            "text": "use github to host a simple website\n\n\nhow-to\n\n\nfor detail refer to \nthis site\n\n\nbriefly, first create a repo on github, then in command lines, do\n\n\ncd site_dir\ngit init\ngit remote add origin https://github.com/***\ngit checkout --orphan gh-pages\ngit add .\ngit commit -m \nadding pages\n\ngit push origin gh-pages\n\n\n\n\ndone! http://username.github.io/repository/.\n\n\nupdate jwiki\n\n\ncd my-wiki\nvim doc/file_to_edit.md\nmkdocs build\ncd site\ngit add .\ngit commit -m \nedited file_to_edit\n\ngit push origin gh-pages", 
            "title": "Github host"
        }, 
        {
            "location": "/tackles/github_host/#use-github-to-host-a-simple-website", 
            "text": "", 
            "title": "use github to host a simple website"
        }, 
        {
            "location": "/tackles/github_host/#how-to", 
            "text": "for detail refer to  this site  briefly, first create a repo on github, then in command lines, do  cd site_dir\ngit init\ngit remote add origin https://github.com/***\ngit checkout --orphan gh-pages\ngit add .\ngit commit -m  adding pages \ngit push origin gh-pages  done! http://username.github.io/repository/.", 
            "title": "how-to"
        }, 
        {
            "location": "/tackles/github_host/#update-jwiki", 
            "text": "cd my-wiki\nvim doc/file_to_edit.md\nmkdocs build\ncd site\ngit add .\ngit commit -m  edited file_to_edit \ngit push origin gh-pages", 
            "title": "update jwiki"
        }, 
        {
            "location": "/tackles/mac_commands/", 
            "text": "Compress files\n\n\n\n\n\n\nunpack .tar.gz files  \n\n\n$ gunzip -c foo.tar.gz | tar xopf - \n$ gunzip -c foo.tar.gz | tar xopft -\n\n\n\n\n\n\n\nunpack .tar files     \n\n\n$ tar xopf foo.tar  \n$ tar xopft foo.tar\n\n\n\n\n\n\n\nunpack .zip files \n\n\n$ unzip -a foo.zip\n\n\n\n\n\n\n\npack .zip files   \n\n\n$ zip -r y.zip y.pdf\n\n\n\n\n\n\n\nDisk usage\n\n\n$ du -h\n$ du -sh\n$ du -sh *\n$ du -sh dir_path\n$ du -a\n$ du -c # total contral\n$ du -sh #show total usage in the dir\n\n$ df -h\n\n\n\n\nvim-latex\n\n\n\n\nvim-latex is install in ~/.vim\n\n\nto configure vim only for latex:\n\n\nedit file ~/.vim/ftplugin/tex_latexSuite.vim\n\n\n\n\nPurdue server\n\n\nconte.rcac.purdue.edu cluster:\n\n\n$ module avail  # shows all available modules\n$ module load   # load module, for example:\n$ module load matlab/R2013a\n\n\n\n\nvirtualbox\n\n\n\n\nID/pw ubuntu/chenjie\n\n\n\n\nchange ubuntu password:\n\n\n\n\nreboot while hold shift\n\n\nLet your virtual Machine to capture your mouse.\n\n\nHold the shift key down to get the grub menu.\n\n\nSelect the recovery mode option.\n\n\nSelect drop to root shell prompt.\n\n\ntype command: mount -rw -o remount /\n\n\nNow, change with # passwd [username] (You can also see the list of users using # nano /etc/passwd).\n\n\n\n\n\n\n\n\nmount shared folder:\n\n\n\n\nadd shared folder in virtualBox\n\n\ntype command in ubuntu: \n\n\n$ sudo mount -t vboxsf -o uid=1000,gid=1000 share /home/\nuser\n/vboxshare\n\n\n\n\n\n\n\n\ngrip\n\n\nuse grip to convert md file to html file from command line. see \nthis link\n\n\ngrip \ngrip foo.md\ngrip foo.md --export foo.html\n\n\n\n\nSypder-py2\n\n\nadd a new module to Syper\n\n\n$python\n\nimport talib\n\ntalib  # copy the module location\n\neixt()\n\n\n\n\nIf it is a .egg file\n\n\n$cp new_module.egg /Applications/Spyder-Py2.app/Contents/Resources/lib/python2.7/\nunzip new_module.egg\nrm new_module.egg\n\n\n\n\nif it is a folder\n\n\n$cp -r new_module_folder /Applications/Spyder-Py2.app/Contents/Resources/lib/python2.7\n\n\n\n\nSSH public/private keys\n\n\nSSH (Secure Shell) can be set up with public/private key pairs so that you do not have to type the password each time. Because SSH is the transport for other services such as SCP (secure copy), SFTP (secure file transfer), and other services (CVS, etc), this can be very convenient and save you a lot of typing.\n\n\nOn the local machine, type the BOLD part. The non-bold part is what you might see as output or prompt.\n\n\n\n\n\n\nStep 1: \n\n\n$ ssh-keygen -t dsa \n    Generating public/private dsa key pair. \n    Enter file in which to save the key (~/.ssh/id_dsa): (just type return) \n    Enter passphrase (empty for no passphrase): (just type return) \n    Enter same passphrase again: (just type return) \n    Your identification has been saved in ~/.ssh/id_dsa \n    Your public key has been saved in ~/.ssh/id_dsa.pub \n    The key fingerprint is: \n    Some really long string\n\n\n\n\n\nStep 2: Then, paste the content of the local \n~/.ssh/id_dsa.pub\n file into the file \n~/.ssh/authorized_keys\n on the remote host.\nRSA instead of DSA\n\n\nIf you want something strong, you could try \n\n$ ssh-keygen -t rsa -b 4096\n\n\nInstead of the names \nid_dsa and id_dsa.pub\n, it will be \nid_rsa and id_rsa.pub\n , etc.\n\n\nThe rest of the steps are identical.\n\n\n\n\n\n\n\n\n\n\n\n\nscreen\n\n\n\n\nstart screen\n\n\n\n\nscreen -ls      # list all screen sessions\nscreen          # start screen\nscreen -S Name  # start screen and give it a name\nscreen -r       # resume last screen\nscreen -r Name  # resume screen with a name\n\n\n\n\n\n\nexit\n\n\n\n\nexit\nC-a d\nC-a D D\nC-a \\", 
            "title": "Mac commands"
        }, 
        {
            "location": "/tackles/mac_commands/#compress-files", 
            "text": "unpack .tar.gz files    $ gunzip -c foo.tar.gz | tar xopf - \n$ gunzip -c foo.tar.gz | tar xopft -    unpack .tar files       $ tar xopf foo.tar  \n$ tar xopft foo.tar    unpack .zip files   $ unzip -a foo.zip    pack .zip files     $ zip -r y.zip y.pdf", 
            "title": "Compress files"
        }, 
        {
            "location": "/tackles/mac_commands/#disk-usage", 
            "text": "$ du -h\n$ du -sh\n$ du -sh *\n$ du -sh dir_path\n$ du -a\n$ du -c # total contral\n$ du -sh #show total usage in the dir\n\n$ df -h", 
            "title": "Disk usage"
        }, 
        {
            "location": "/tackles/mac_commands/#vim-latex", 
            "text": "vim-latex is install in ~/.vim  to configure vim only for latex:  edit file ~/.vim/ftplugin/tex_latexSuite.vim", 
            "title": "vim-latex"
        }, 
        {
            "location": "/tackles/mac_commands/#purdue-server", 
            "text": "conte.rcac.purdue.edu cluster:  $ module avail  # shows all available modules\n$ module load   # load module, for example:\n$ module load matlab/R2013a", 
            "title": "Purdue server"
        }, 
        {
            "location": "/tackles/mac_commands/#virtualbox", 
            "text": "ID/pw ubuntu/chenjie   change ubuntu password:   reboot while hold shift  Let your virtual Machine to capture your mouse.  Hold the shift key down to get the grub menu.  Select the recovery mode option.  Select drop to root shell prompt.  type command: mount -rw -o remount /  Now, change with # passwd [username] (You can also see the list of users using # nano /etc/passwd).     mount shared folder:   add shared folder in virtualBox  type command in ubuntu:   $ sudo mount -t vboxsf -o uid=1000,gid=1000 share /home/ user /vboxshare", 
            "title": "virtualbox"
        }, 
        {
            "location": "/tackles/mac_commands/#grip", 
            "text": "use grip to convert md file to html file from command line. see  this link  grip \ngrip foo.md\ngrip foo.md --export foo.html", 
            "title": "grip"
        }, 
        {
            "location": "/tackles/mac_commands/#sypder-py2", 
            "text": "add a new module to Syper  $python import talib talib  # copy the module location eixt()  If it is a .egg file  $cp new_module.egg /Applications/Spyder-Py2.app/Contents/Resources/lib/python2.7/\nunzip new_module.egg\nrm new_module.egg  if it is a folder  $cp -r new_module_folder /Applications/Spyder-Py2.app/Contents/Resources/lib/python2.7", 
            "title": "Sypder-py2"
        }, 
        {
            "location": "/tackles/mac_commands/#ssh-publicprivate-keys", 
            "text": "SSH (Secure Shell) can be set up with public/private key pairs so that you do not have to type the password each time. Because SSH is the transport for other services such as SCP (secure copy), SFTP (secure file transfer), and other services (CVS, etc), this can be very convenient and save you a lot of typing.  On the local machine, type the BOLD part. The non-bold part is what you might see as output or prompt.    Step 1:   $ ssh-keygen -t dsa \n    Generating public/private dsa key pair. \n    Enter file in which to save the key (~/.ssh/id_dsa): (just type return) \n    Enter passphrase (empty for no passphrase): (just type return) \n    Enter same passphrase again: (just type return) \n    Your identification has been saved in ~/.ssh/id_dsa \n    Your public key has been saved in ~/.ssh/id_dsa.pub \n    The key fingerprint is: \n    Some really long string   Step 2: Then, paste the content of the local  ~/.ssh/id_dsa.pub  file into the file  ~/.ssh/authorized_keys  on the remote host.\nRSA instead of DSA  If you want something strong, you could try  $ ssh-keygen -t rsa -b 4096  Instead of the names  id_dsa and id_dsa.pub , it will be  id_rsa and id_rsa.pub  , etc.  The rest of the steps are identical.", 
            "title": "SSH public/private keys"
        }, 
        {
            "location": "/tackles/mac_commands/#screen", 
            "text": "start screen   screen -ls      # list all screen sessions\nscreen          # start screen\nscreen -S Name  # start screen and give it a name\nscreen -r       # resume last screen\nscreen -r Name  # resume screen with a name   exit   exit\nC-a d\nC-a D D\nC-a \\", 
            "title": "screen"
        }, 
        {
            "location": "/tackles/markdown/", 
            "text": "MarkDown notes\n\n\nHeaders\n\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\n\n\n\nH1\n\n\nH2\n\n\nH3\n\n\nH4\n\n\nH5\n\n\nH6\n\n\nAlternatively, for H1 and H2, an underline-ish style:\n\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n\n\n\nAlt-H1\n\n\nAlt-H2\n\n\nlist\n\n\n1. First ordered list item\n2. Another item\n    * Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n    1. Ordered sub-list\n4. And another item.\n\n    You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n    To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\nNote that this line is separate, but within the same paragraph.\u22c5\u22c5\n    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n\n\n\n\n\nFirst ordered list item\n\n\nAnother item\n\n\nUnordered sub-list. \n\n\n\n\n\n\nActual numbers don't matter, just that it's a number\n\n\nOrdered sub-list\n\n\n\n\n\n\n\n\nAnd another item.\n\n\nYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\nTo have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\n\n\n\n\n\nNote that this line is separate, but within the same paragraph.\u22c5\u22c5\n    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n\n\n\nUnordered list can use asterisks\n\n\nOr minuses\n\n\nOr pluses\n\n\n\n\ntext\n\n\n**bold** or __bold__\n\n*this is italic* or _italic_\n\n**blod _italic_**\n\n~~sctrach this~~\n\n\n\n\nbold\n or \nbold\n\n\nthis is italic\n or \nitalic\n\n\nblod \nitalic\n\n\n~~sctrach this~~\n\n\nlinks\n\n\n- style 1: [google](http://www.google.com)\n- style 2: \nhttp://www.google.com\n\n- style 3: reference style, [google][1]\n\n[1]: http://www.google.com\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\n\n\n\n\n\n\nstyle 1: \ngoogle\n\n\nstyle 2: \nhttp://www.google.com\n\n\nstyle 3: reference style, [google][1]\n\n\n\n\nquote\n\n\n Blockquotes are very handy in email to emulate reply text.\n\n This line is part of the same quote.\n\nQuote break.\n\n\n This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n\n\n\n\n\n\nBlockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.\n\n\n\n\nQuote break.\n\n\n\n\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can \nput\n \nMarkdown\n into a blockquote. \n\n\n\n\nImages\n\n\nHere's our logo (hover to see the title text):\n\n\nInline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \nLogo Title Text 1\n)\n\nReference-style: \n![alt text][logo]\n\n\n\n\nInline-style: \n\n\n\nReference-style: \n![alt text][logo]\n\n\ntable\n\n\nColons can be used to align columns.\n\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n\n\n\n\n\n\n\n\n\nTables\n\n\nAre\n\n\nCool\n\n\n\n\n\n\n\n\n\n\ncol 3 is\n\n\nright-aligned\n\n\n$1600\n\n\n\n\n\n\ncol 2 is\n\n\ncentered\n\n\n$12\n\n\n\n\n\n\nzebra stripes\n\n\nare neat\n\n\n$1\n\n\n\n\n\n\n\n\nThe outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n\n\n\n\n\n\n\n\n\n\nMarkdown\n\n\nLess\n\n\nPretty\n\n\n\n\n\n\n\n\n\n\nStill\n\n\nrenders\n\n\nnicely\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\nInline HTML\n\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\n\n\ndl\n\n  \ndt\nDefinition list\n/dt\n\n  \ndd\nIs something people use sometimes.\n/dd\n\n\n  \ndt\nMarkdown in HTML\n/dt\n\n  \ndd\nDoes *not* work **very** well. Use HTML \nem\ntags\n/em\n.\n/dd\n\n\n/dl\n\n\n\n\n\n\n  \nDefinition list\n\n  \nIs something people use sometimes.\n\n\n  \nMarkdown in HTML\n\n  \nDoes *not* work **very** well. Use HTML \ntags\n.\n\n\n\n\n\nHorizontal Rule\n\n\nThree or more...\n\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n\n\n\n\n\nHyphens\n\n\n\n\nAsterisks\n\n\n\n\nUnderscores\n\n\nCode blocks\n\n\nInline `code` has `back-ticks around` it.\n\n\nformat 1:\n\n    #!/usr/bin/python\n    # Code goes here ...\n\nformat 2:\n\n    :::python\n    # Code goes here ...\n\nformat 3: \n\n~~~~~~\n\na href=\n#\nMy code\n/a\n\n~~~~~~\n\n\n\n\n\nInline \ncode\n has \nback-ticks around\n it.\n\n\nformat 1:\n\n\n#!/usr/bin/python\n# Code goes here ...\n\n\n\nformat 2:\n\n\n:::python\n# Code goes here ...\n\n\n\nformat 3: \n\n\na href=\n#\nMy code\n/a\n\n\n\n\n\nformat 4:\n\n\nvar s = \nJavaScript syntax highlighting\n;\nalert(s);\n\n\n\n\nMou config is incorrect??\n\n\ns = \nPython syntax highlighting\n\nprint s\n\n\n\n\nNo language indicated, so no syntax highlighting. \nBut let's throw in a \nb\ntag\n/b\n.\n\n\n\n\nCode block in list\n\n\nindent 8 spaces to insert code block\n\n\n* list1\n\n        code block\n\n* list2\n\n\n\n\n\n\n\n\nlist1\n\n\ncode block\n\n\n\n\n\n\n\nlist2", 
            "title": "Markdown"
        }, 
        {
            "location": "/tackles/markdown/#markdown-notes", 
            "text": "", 
            "title": "MarkDown notes"
        }, 
        {
            "location": "/tackles/markdown/#headers", 
            "text": "# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6", 
            "title": "Headers"
        }, 
        {
            "location": "/tackles/markdown/#h1", 
            "text": "", 
            "title": "H1"
        }, 
        {
            "location": "/tackles/markdown/#h2", 
            "text": "", 
            "title": "H2"
        }, 
        {
            "location": "/tackles/markdown/#h3", 
            "text": "", 
            "title": "H3"
        }, 
        {
            "location": "/tackles/markdown/#h4", 
            "text": "", 
            "title": "H4"
        }, 
        {
            "location": "/tackles/markdown/#h5", 
            "text": "", 
            "title": "H5"
        }, 
        {
            "location": "/tackles/markdown/#h6", 
            "text": "Alternatively, for H1 and H2, an underline-ish style:  Alt-H1\n======\n\nAlt-H2\n------", 
            "title": "H6"
        }, 
        {
            "location": "/tackles/markdown/#alt-h1", 
            "text": "", 
            "title": "Alt-H1"
        }, 
        {
            "location": "/tackles/markdown/#alt-h2", 
            "text": "", 
            "title": "Alt-H2"
        }, 
        {
            "location": "/tackles/markdown/#list", 
            "text": "1. First ordered list item\n2. Another item\n    * Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n    1. Ordered sub-list\n4. And another item.\n\n    You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n    To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\nNote that this line is separate, but within the same paragraph.\u22c5\u22c5\n    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)   First ordered list item  Another item  Unordered sub-list.     Actual numbers don't matter, just that it's a number  Ordered sub-list     And another item.  You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).  To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5    Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)   Unordered list can use asterisks  Or minuses  Or pluses", 
            "title": "list"
        }, 
        {
            "location": "/tackles/markdown/#text", 
            "text": "**bold** or __bold__\n\n*this is italic* or _italic_\n\n**blod _italic_**\n\n~~sctrach this~~  bold  or  bold  this is italic  or  italic  blod  italic  ~~sctrach this~~", 
            "title": "text"
        }, 
        {
            "location": "/tackles/markdown/#links", 
            "text": "- style 1: [google](http://www.google.com)\n- style 2:  http://www.google.com \n- style 3: reference style, [google][1]\n\n[1]: http://www.google.com\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png   style 1:  google  style 2:  http://www.google.com  style 3: reference style, [google][1]", 
            "title": "links"
        }, 
        {
            "location": "/tackles/markdown/#quote", 
            "text": "Blockquotes are very handy in email to emulate reply text.  This line is part of the same quote.\n\nQuote break.  This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.    Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.   Quote break.   This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can  put   Markdown  into a blockquote.", 
            "title": "quote"
        }, 
        {
            "location": "/tackles/markdown/#images", 
            "text": "Here's our logo (hover to see the title text):  Inline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png  Logo Title Text 1 )\n\nReference-style: \n![alt text][logo]  Inline-style:   Reference-style: \n![alt text][logo]", 
            "title": "Images"
        }, 
        {
            "location": "/tackles/markdown/#table", 
            "text": "Colons can be used to align columns.  | Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |     Tables  Are  Cool      col 3 is  right-aligned  $1600    col 2 is  centered  $12    zebra stripes  are neat  $1     The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.  Markdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3     Markdown  Less  Pretty      Still  renders  nicely    1  2  3", 
            "title": "table"
        }, 
        {
            "location": "/tackles/markdown/#inline-html", 
            "text": "You can also use raw HTML in your Markdown, and it'll mostly work pretty well.  dl \n   dt Definition list /dt \n   dd Is something people use sometimes. /dd \n\n   dt Markdown in HTML /dt \n   dd Does *not* work **very** well. Use HTML  em tags /em . /dd  /dl   \n   Definition list \n   Is something people use sometimes. \n\n   Markdown in HTML \n   Does *not* work **very** well. Use HTML  tags .", 
            "title": "Inline HTML"
        }, 
        {
            "location": "/tackles/markdown/#horizontal-rule", 
            "text": "Three or more...  ---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores   Hyphens   Asterisks   Underscores", 
            "title": "Horizontal Rule"
        }, 
        {
            "location": "/tackles/markdown/#code-blocks", 
            "text": "Inline `code` has `back-ticks around` it.\n\n\nformat 1:\n\n    #!/usr/bin/python\n    # Code goes here ...\n\nformat 2:\n\n    :::python\n    # Code goes here ...\n\nformat 3: \n\n~~~~~~ a href= # My code /a \n~~~~~~  Inline  code  has  back-ticks around  it.  format 1:  #!/usr/bin/python\n# Code goes here ...  format 2:  :::python\n# Code goes here ...  format 3:   a href= # My code /a   format 4:  var s =  JavaScript syntax highlighting ;\nalert(s);  Mou config is incorrect??  s =  Python syntax highlighting \nprint s  No language indicated, so no syntax highlighting. \nBut let's throw in a  b tag /b .", 
            "title": "Code blocks"
        }, 
        {
            "location": "/tackles/markdown/#code-block-in-list", 
            "text": "indent 8 spaces to insert code block  * list1\n\n        code block\n\n* list2    list1  code block    list2", 
            "title": "Code block in list"
        }, 
        {
            "location": "/tackles/mkdocs/", 
            "text": "MkDocs\n\n\nMkdocs converts a list of markdown files into a well orgnized website. This site is an example of the output of mkdocs.\n\n\nFor full documentation, visit \nmkdocs.org\n.\n\n\nBasics\n\n\n$ mkdocs new [dir-name]    # Create a new project.\n$ cd [dir-name]\n$ mkdocs build             # Build the documentation site.\n$ mkdocs serve             # Start the live-reloading docs server.\n$ mkdocs help              # Print this help message.\n\n\n\n\nFile layout\n\n\nmkdocs.yml    #\u00a0The configuration file, edit site title, theme, etc.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nstie/\n    ...       # site generated by mkdocs\n\n\n\nResources\n\n\nmkdocs \nthemes\n\n\nDisplay math\n\n\nThis is actually easier than I expected. First I installed the Python-Markdown-Math Extension:\n\n\npip install https://github.com/mitya57/python-markdown-math/archive/master.zip\nThen I created a new MkDocs project:\n\n\nmkdocs new test_math\nNext I edited the test_math/docs/index.md file to be as follows (sample borrowed from the MathJax documentation):\n\n\nMathJax Test Page\n\n\nWhen \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\nFinally, I edited the test_math/config.yaml file to be as follows:\n\nsite_name: Test Math\n\nextra_javascript: \n    - http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n\n    markdown_extensions:\n        - mdx_math\n        I was unsure if this would work, but I ran the test server to see:", 
            "title": "Mkdocs"
        }, 
        {
            "location": "/tackles/mkdocs/#mkdocs", 
            "text": "Mkdocs converts a list of markdown files into a well orgnized website. This site is an example of the output of mkdocs.  For full documentation, visit  mkdocs.org .", 
            "title": "MkDocs"
        }, 
        {
            "location": "/tackles/mkdocs/#basics", 
            "text": "$ mkdocs new [dir-name]    # Create a new project.\n$ cd [dir-name]\n$ mkdocs build             # Build the documentation site.\n$ mkdocs serve             # Start the live-reloading docs server.\n$ mkdocs help              # Print this help message.", 
            "title": "Basics"
        }, 
        {
            "location": "/tackles/mkdocs/#file-layout", 
            "text": "mkdocs.yml    #\u00a0The configuration file, edit site title, theme, etc.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nstie/\n    ...       # site generated by mkdocs", 
            "title": "File layout"
        }, 
        {
            "location": "/tackles/mkdocs/#resources", 
            "text": "mkdocs  themes", 
            "title": "Resources"
        }, 
        {
            "location": "/tackles/mkdocs/#display-math", 
            "text": "This is actually easier than I expected. First I installed the Python-Markdown-Math Extension:  pip install https://github.com/mitya57/python-markdown-math/archive/master.zip\nThen I created a new MkDocs project:  mkdocs new test_math\nNext I edited the test_math/docs/index.md file to be as follows (sample borrowed from the MathJax documentation):", 
            "title": "Display math"
        }, 
        {
            "location": "/tackles/mkdocs/#mathjax-test-page", 
            "text": "When \\(a \\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\nFinally, I edited the test_math/config.yaml file to be as follows:\n\nsite_name: Test Math\n\nextra_javascript: \n    - http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n\n    markdown_extensions:\n        - mdx_math\n        I was unsure if this would work, but I ran the test server to see:", 
            "title": "MathJax Test Page"
        }, 
        {
            "location": "/work/DG_note/", 
            "text": "notes to run Time_domain_DG\n\n\nssh to conte\n\n\ncd Time_domain_DG/RKDG/input\nqsub simu_qsub\n\n\n\n\nrun code interactively\n\n\n-q gmig -l nodes=1:ppn=16,walltime=4:00:00\n\n\n\n\nuseful commends\n\n\nqstat\nqstat -u \nchen1430\n\nqdel", 
            "title": "DG note"
        }, 
        {
            "location": "/work/DG_note/#notes-to-run-time_domain_dg", 
            "text": "ssh to conte  cd Time_domain_DG/RKDG/input\nqsub simu_qsub  run code interactively  -q gmig -l nodes=1:ppn=16,walltime=4:00:00  useful commends  qstat\nqstat -u  chen1430 \nqdel", 
            "title": "notes to run Time_domain_DG"
        }, 
        {
            "location": "/work/python_notes/", 
            "text": "Python notes\n\n\n\n\nPackages\n\n\nSee [package list]\n/Users/Jie/Dropbox/work/Study/python/useful_libraries_for_data_science_in_python.md\n for more\n\n\n\n\nFundamental Libraries for Scientific Computing\n\n\nIPython Notebook\n\n\nNumPy\n\n\npandas\n\n\nSciPy\n\n\n\n\n\n\nMath and Statistics\n\n\nSymPy\n\n\nStatsmodels\n\n\n\n\n\n\nMachine Learning\n\n\nScikit-learn\n\n\nShogun\n\n\nPyBrain\n\n\nPyLearn2\n\n\nPyMC\n\n\n\n\n\n\nPlotting and Visualization\n\n\nBokeh\n\n\nd3py\n\n\nggplot\n\n\nmatplotlib\n\n\nplotly\n\n\nprettyplotlib\n\n\nseaborn\n\n\n\n\n\n\nData formatting and storage\n\n\ncsvkit\n\n\nPyTables\n\n\nsqlite3", 
            "title": "Python notes"
        }, 
        {
            "location": "/work/python_notes/#python-notes", 
            "text": "", 
            "title": "Python notes"
        }, 
        {
            "location": "/work/python_notes/#packages", 
            "text": "See [package list] /Users/Jie/Dropbox/work/Study/python/useful_libraries_for_data_science_in_python.md  for more   Fundamental Libraries for Scientific Computing  IPython Notebook  NumPy  pandas  SciPy    Math and Statistics  SymPy  Statsmodels    Machine Learning  Scikit-learn  Shogun  PyBrain  PyLearn2  PyMC    Plotting and Visualization  Bokeh  d3py  ggplot  matplotlib  plotly  prettyplotlib  seaborn    Data formatting and storage  csvkit  PyTables  sqlite3", 
            "title": "Packages"
        }
    ]
}